"use strict";
(self.webpackJsonp__wix_thunderbolt_app = self.webpackJsonp__wix_thunderbolt_app || []).push([
    [6121], {
        83779: function(e, i, t) {
            t.r(i), t.d(i, {
                AUTH_RESULT_REASON: function() {
                    return y.$9
                },
                BIEvents: function() {
                    return R
                },
                INTERACTIONS: function() {
                    return y.SE
                },
                PrivacyStatus: function() {
                    return y.iY
                },
                PrivacyStatusStatus: function() {
                    return I
                },
                Role: function() {
                    return O
                },
                SiteMembersApiSymbol: function() {
                    return D.n9
                },
                Status: function() {
                    return P
                },
                isLoginAcceptableError: function() {
                    return k.Y2
                },
                isSignupAcceptableError: function() {
                    return k.fJ
                },
                memberDetailsFromDTO: function() {
                    return k.Ky
                },
                page: function() {
                    return K
                },
                site: function() {
                    return Y
                }
            });
            var o = t(43757),
                n = t(61049),
                a = t(49574),
                s = t(5096),
                r = t(55048),
                l = t(10666),
                c = t(58629),
                d = t(26513),
                u = t(82627),
                g = t(94315),
                p = t(25954),
                m = t(8562),
                h = t(21511),
                v = t(56405),
                C = t(19238),
                b = t(87821),
                S = t(86305),
                w = t(99552),
                E = t(16684),
                y = t(95848),
                D = t(2811);
            class f {
                constructor(e, i, t, o, n) {
                    this.propsStore = e, this.structureApi = i, this.siteScrollBlocker = t, this.browserWindow = o, this.cyclicTabbing = n
                }
                async displayDialog(e, i, t, o = {}) {
                    const n = async () => {
                            (0, m.yF)(this.browserWindow) || (this.activeElementBeforeShowDialog = this.browserWindow.document.activeElement);
                            const o = (0, E.uniqueId)(D.rj);
                            this.propsStore.update({
                                [o]: Object.assign(Object.assign({}, i), t)
                            }), this.currentCompId && this.cyclicTabbing.disableCyclicTabbing(this.currentCompId), this.cyclicTabbing.enableCyclicTabbing(o), await this.structureApi.addComponentToDynamicStructure(o, {
                                componentType: e,
                                components: []
                            }), this.currentCompId && (this.structureApi.removeComponentFromDynamicStructure(this.currentCompId), this.siteScrollBlocker.setSiteScrollingBlocked(!1, this.currentCompId)), this.siteScrollBlocker.setSiteScrollingBlocked(!0, o), this.currentCompId = o
                        },
                        {
                            shouldWaitForAppDidMount: a,
                            registerToAppDidMount: s
                        } = o;
                    a && s ? s(n) : await n()
                }
                hideDialog() {
                    var e;
                    this.currentCompId && (this.structureApi.removeComponentFromDynamicStructure(this.currentCompId), this.siteScrollBlocker.setSiteScrollingBlocked(!1, this.currentCompId), this.cyclicTabbing.disableCyclicTabbing(this.currentCompId)), this.currentCompId = void 0, (0, m.yF)(this.browserWindow) || (null === (e = this.activeElementBeforeShowDialog) || void 0 === e || e.focus(), this.activeElementBeforeShowDialog = null)
                }
            }
            var I, P, O;
            ! function(e) {
                e.UNKNOWN = "UNKNOWN", e.PRIVATE = "PRIVATE", e.PUBLIC = "PUBLIC"
            }(I || (I = {})),
            function(e) {
                e.UNKNOWN = "UNKNOWN", e.PENDING = "PENDING", e.APPROVED = "APPROVED", e.BLOCKED = "BLOCKED", e.OFFLINE = "OFFLINE"
            }(P || (P = {})),
            function(e) {
                e.UNDEFINED_ROLE = "UNDEFINED_ROLE", e.MEMBER = "MEMBER", e.OWNER = "OWNER", e.CONTRIBUTOR = "CONTRIBUTOR"
            }(O || (O = {}));
            var k = t(43096),
                L = t(42473),
                A = t(86681);
            const R = ({
                    sessionManager: e,
                    businessLogger: i,
                    wixBiSession: t,
                    viewMode: o,
                    language: n
                }) => {
                    const a = (i, a) => ({
                        biToken: t.msId,
                        context: i,
                        ts: T(t),
                        viewmode: o,
                        visitor_id: e.getVisitorId(),
                        site_member_id: e.getSiteMemberId(),
                        vsi: t.viewerSessionId,
                        site_settings_lng: n.siteLanguage,
                        browser_lng: n.userLanguage,
                        lng_mismatch: n.siteLanguage !== n.userLanguage,
                        layout: a
                    });
                    return {
                        loginOrSignUpDialogLoaded: (e, t = "fullscreen") => {
                            i.logger.log(Object.assign({
                                src: 5,
                                evid: 658
                            }, a(e, t)), {
                                endpoint: "site-members"
                            })
                        },
                        closingDialog: (e, t = "fullscreen") => {
                            i.logger.log(Object.assign({
                                src: 5,
                                evid: 602,
                                form_type: "default"
                            }, a(e, t)), {
                                endpoint: "site-members"
                            })
                        },
                        emailAuthSubmitClicked: (e, t) => {
                            i.logger.log(Object.assign({
                                src: 5,
                                evid: 603,
                                form_type: "default"
                            }, a(e, t)), {
                                endpoint: "site-members"
                            })
                        },
                        siteMembersFeatureLoaded: () => {
                            i.logger.log(Object.assign({
                                src: 5,
                                evid: 698
                            }, a()), {
                                endpoint: "site-members"
                            })
                        },
                        siteMembersSdkFeatureLoaded: () => {
                            i.logger.log(Object.assign({
                                src: 5,
                                evid: 699
                            }, a()), {
                                endpoint: "site-members"
                            })
                        },
                        siteMembersEmailConfirmationNewMembersModalLoad: () => {
                            i.logger.log(Object.assign({
                                src: 5,
                                evid: 1809
                            }, a()), {
                                endpoint: "site-members"
                            })
                        },
                        siteMembersEmailConfirmationSendCodeClick: () => {
                            i.logger.log(Object.assign({
                                src: 5,
                                evid: 1810
                            }, a()), {
                                endpoint: "site-members"
                            })
                        },
                        siteMembersEmailConfirmationOnResendCodeClick: () => {
                            i.logger.log(Object.assign({
                                src: 5,
                                evid: 1811
                            }, a()), {
                                endpoint: "site-members"
                            })
                        }
                    }
                },
                T = e => {
                    const i = e.initialTimestamp || 0;
                    return Date.now() - i
                },
                N = {
                    isCloseable: !0,
                    returnPages: !1
                };
            class U {
                constructor(e, i) {
                    this.shouldRunCustomPopupCloseCallback = !0, this.popups = e, this.onReset = i, this.config = N
                }
                async openPopupPage(e, i) {
                    var t;
                    const o = this.shouldRunCustomPopupCloseCallback;
                    this.preventCustomPopupCloseCallback(), await (null === (t = this.popups) || void 0 === t ? void 0 : t.open(e, (() => {
                        this.shouldRunCustomPopupCloseCallback && (this.rejectAuthenticationRequest(), i && i())
                    }))), this.shouldRunCustomPopupCloseCallback = o
                }
                preventCustomPopupCloseCallback() {
                    this.shouldRunCustomPopupCloseCallback = !1
                }
                allowCustomPopupCloseCallback() {
                    this.shouldRunCustomPopupCloseCallback = !0
                }
                assignRequestAuthenticationRejection(e) {
                    this.requestAuthenticationRejectInstance = this.requestAuthenticationRejectInstance || e
                }
                assignRequestAuthenticationResolveInstance(e) {
                    this.requestAuthenticationResolveInstance = this.requestAuthenticationResolveInstance || e
                }
                assignRequestAuthenticationPromise(e, i) {
                    this.requestAuthenticationRejectInstance = this.requestAuthenticationRejectInstance || i, this.requestAuthenticationResolveInstance = this.requestAuthenticationResolveInstance || e
                }
                rejectAuthenticationRequest() {
                    this.requestAuthenticationRejectInstance && (this.requestAuthenticationRejectInstance(y.$9.CANCELED), this.reset())
                }
                resolveAuthenticationRequest(e) {
                    this.requestAuthenticationRejectInstance && (this.requestAuthenticationResolveInstance(e), this.reset())
                }
                setConfig({
                    isCloseable: e = !0,
                    returnPages: i = !1
                }) {
                    this.config = {
                        isCloseable: e,
                        returnPages: i
                    }
                }
                reset() {
                    var e;
                    null === (e = this.onReset) || void 0 === e || e.call(this), this.requestAuthenticationRejectInstance = void 0, this.requestAuthenticationResolveInstance = void 0, this.config = N
                }
            }
            const _ = e => {
                    var i, t;
                    const o = null === (i = e.joinCommunityCheckedByDefault) || void 0 === i || i,
                        n = null !== (t = e.privacyNoteType) && void 0 !== t ? t : "CHECKBOX";
                    return o ? n : "CHECKBOX"
                },
                M = e => {
                    var i;
                    return "NOTE" === _(e) || (null === (i = e.joinCommunityCheckedByDefault) || void 0 === i || i)
                },
                B = {
                    [P.APPROVED]: "ACTIVE",
                    [P.PENDING]: "PENDING"
                },
                j = e => {
                    var i;
                    return e && null !== (i = B[e]) && void 0 !== i ? i : "APPLICANT"
                },
                $ = (e, i, t) => {
                    document.cookie = `${e}=;max-age=0`, document.cookie = `${e}=;max-age=0;path=${i}`, document.cookie = `${e}=;domain=${t};max-age=0`, document.cookie = `${e}=;domain=${t};max-age=0;path=${i}`
                },
                F = (0, o.ff)([(0, o.t6)(n.R9, D.u2), (0, o.t6)(n.jC, D.u2), (0, o.t6)(n.Wf, D.u2), (0, o.t6)(n.z8, D.u2), a.U, s.EE, s.Zr, v.Xb, r.xP, r.QZ, s.bk, s.ZQ, C.F0, (0, o.jt)(b.x), C.Iz, l.$, c.sK, (0, o.jt)(S.cC), (0, o.jt)(w.I), d.jj, u.O, (0, o.jt)(g.C), (0, o.jt)(A.a), (0, o.jt)(L.I)], ((e, i, t, o, n, a, s, r, l, c, d, u, g, v, C, b, S, w, D = {
                    trackEvent: () => 0
                }, I, P, L, A, T) => {
                    var N, B, F, V;
                    const W = (0, p.O)(),
                        {
                            loginSocialBarOnSite: x,
                            isCommunityInstalled: G,
                            collectionExposure: q,
                            protectedHomepage: z,
                            smSessionCookie: Y,
                            memberInfoAppId: K,
                            smcollectionId: H,
                            isTemplate: J
                        } = e;
                    let {
                        sm_efCookie: X
                    } = e;
                    const Q = "WixInternal" === q,
                        Z = "22bef345-3c5b-4c18-b782-74d4085112ff",
                        ee = r.getUserSession();
                    let ie = r.getAppInstanceByAppDefId(Z);
                    const te = () => (0, k.OP)(r),
                        {
                            smSettings: oe,
                            tpaApplicationIds: ne,
                            policyLinks: ae,
                            translations: se
                        } = i,
                        re = K && ne[K],
                        {
                            metaSiteId: le,
                            externalBaseUrl: ce,
                            siteId: de,
                            siteRevision: ue
                        } = s.site,
                        ge = s.requestUrl,
                        pe = s.viewMode,
                        me = null !== (B = null === (N = s.anywhereConfig) || void 0 === N ? void 0 : N.siteId) && void 0 !== B ? B : de,
                        he = null !== (V = null === (F = s.anywhereConfig) || void 0 === F ? void 0 : F.revision) && void 0 !== V ? V : ue,
                        ve = -1 !== y.F0.findIndex((e => {
                            var i, t;
                            return null === (t = null === (i = null == u ? void 0 : u.navigator) || void 0 === i ? void 0 : i.userAgent) || void 0 === t ? void 0 : t.includes(e)
                        })),
                        Ce = !ve,
                        be = !ve,
                        Se = `/_api/wix-sm-webapp/tokens/verify/${le}/${me}`,
                        we = `${ce.replace(/\/$/,"")}/api/wix-sm/v1/authorize/${me}/pages`,
                        Ee = `/_api/wix-sm-webapp/tokens/logout/${le}`,
                        ye = `/_api/wix-sm-webapp/member/changePasswordWithMailToken?metaSiteId=${le}&collectionId=${H}`,
                        De = `/_api/wix-sm-webapp/social/token/handle?metaSiteId=${le}&collectionId=${H}`,
                        fe = oe.smFirstDialogLogin ? "login" : "signup",
                        {
                            socialLoginFacebookEnabled: Ie,
                            socialLoginGoogleEnabled: Pe,
                            termsOfUse: Oe,
                            privacyPolicy: ke,
                            codeOfConduct: Le,
                            customSignUpPageId: Ae,
                            customSignInPageId: Re
                        } = oe,
                        {
                            privacyNoteType: Te,
                            joinCommunityCheckedByDefault: Ne
                        } = ((e, i) => {
                            var t;
                            return i["specs.thunderbolt.enableSignUpPrivacyNoteType"] ? {
                                privacyNoteType: _(e),
                                joinCommunityCheckedByDefault: M(e)
                            } : {
                                privacyNoteType: "CHECKBOX",
                                joinCommunityCheckedByDefault: null === (t = e.joinCommunityCheckedByDefault) || void 0 === t || t
                            }
                        })(oe, P);
                    let {
                        smToken: Ue
                    } = e, _e = {}, Me = Y, Be = null, je = !1;
                    const $e = e => {
                            Be = e
                        },
                        Fe = () => ({
                            registerToAppDidMount: $e,
                            shouldWaitForAppDidMount: !je
                        }),
                        Ve = async () => {
                            var e;
                            if (P["specs.thunderbolt.getMemberDetailsFromMembersNg"]) {
                                const {
                                    member: i
                                } = await ze("/_api/members/v1/members/my?fieldsets=FULL", {
                                    headers: {
                                        authorization: null !== (e = r.getAppInstanceByAppDefId(Z)) && void 0 !== e ? e : ""
                                    }
                                }), {
                                    role: t
                                } = await (0, k.Xh)((() => {
                                    var e;
                                    return ze(`/api/wix-sm/v1/members/${null==i?void 0:i.id}/role`, {
                                        headers: {
                                            authorization: null !== (e = r.getAppInstanceByAppDefId(Z)) && void 0 !== e ? e : ""
                                        }
                                    })
                                }), (() => ({
                                    role: O.MEMBER
                                })));
                                return (({
                                    member: e,
                                    role: i
                                }) => {
                                    var t, o, n, a, s, r, l, c, d, u, g, p, m, h, v, C, b, S, w, E, y;
                                    return {
                                        id: null !== (t = null == e ? void 0 : e.id) && void 0 !== t ? t : "",
                                        contactId: null !== (o = null == e ? void 0 : e.contactId) && void 0 !== o ? o : "",
                                        loginEmail: null !== (n = null == e ? void 0 : e.loginEmail) && void 0 !== n ? n : "",
                                        imageUrl: null !== (r = null === (s = null === (a = null == e ? void 0 : e.profile) || void 0 === a ? void 0 : a.photo) || void 0 === s ? void 0 : s.url) && void 0 !== r ? r : "",
                                        nickname: null !== (c = null === (l = null == e ? void 0 : e.profile) || void 0 === l ? void 0 : l.nickname) && void 0 !== c ? c : "",
                                        profilePrivacyStatus: null !== (d = null == e ? void 0 : e.privacyStatus) && void 0 !== d ? d : "",
                                        slug: null !== (g = null === (u = null == e ? void 0 : e.profile) || void 0 === u ? void 0 : u.slug) && void 0 !== g ? g : "",
                                        status: j(null == e ? void 0 : e.status),
                                        creationDate: null !== (p = null == e ? void 0 : e.createdDate) && void 0 !== p ? p : "",
                                        lastUpdateDate: null !== (m = null == e ? void 0 : e.updatedDate) && void 0 !== m ? m : "",
                                        lastLoginDate: null !== (h = null == e ? void 0 : e.lastLoginDate) && void 0 !== h ? h : "",
                                        emailVerified: null !== (v = null == e ? void 0 : e.loginEmailVerified) && void 0 !== v && v,
                                        role: null != i ? i : "MEMBER",
                                        owner: i === O.OWNER,
                                        firstName: null !== (b = null === (C = null == e ? void 0 : e.contact) || void 0 === C ? void 0 : C.firstName) && void 0 !== b ? b : "",
                                        lastName: null !== (w = null === (S = null == e ? void 0 : e.contact) || void 0 === S ? void 0 : S.lastName) && void 0 !== w ? w : "",
                                        memberName: `${null===(E=null==e?void 0:e.contact)||void 0===E?void 0:E.firstName} ${null===(y=null==e?void 0:e.contact)||void 0===y?void 0:y.lastName}`,
                                        groups: void 0,
                                        emails: void 0,
                                        phones: void 0,
                                        addresses: void 0,
                                        labels: void 0,
                                        customFields: void 0
                                    }
                                })({
                                    member: i,
                                    role: t
                                })
                            }
                            const i = `/_api/wix-sm-webapp/member/${Ue}?collectionId=${H}&metaSiteId=${le}`,
                                {
                                    payload: t
                                } = await ze(i);
                            return (0, k.Ky)(t)
                        },
                        We = {},
                        xe = {},
                        Ge = R({
                            sessionManager: r,
                            businessLogger: b,
                            wixBiSession: S,
                            viewMode: null == pe ? void 0 : pe.toUpperCase(),
                            language: d
                        });
                    Ge.siteMembersFeatureLoaded();
                    const qe = {},
                        ze = (0, k.Qn)(n, {
                            credentials: "same-origin",
                            headers: {
                                accept: "application/json",
                                "x-wix-site-revision": `${he}`,
                                "x-wix-client-artifact-id": "thunderbolt"
                            }
                        }, ge),
                        Ye = ((e, i, t, o, n) => new f(e, i, t, o, n))(l, c, v, u, A),
                        Ke = ((e, i, t, o, n) => {
                            let a, s;
                            const r = async () => s || e("/_serverless/collection-settings-facade/get-settings", {
                                    headers: {
                                        "Content-Type": "application/json",
                                        authorization: n || ""
                                    }
                                }).then((e => (s = e, s))),
                                l = async () => o["specs.thunderbolt.useIAMEnabledConnections"] ? r().then((e => e.collectionSettings)) : a || e("/_api/wix-sm-webapp/v1/collection/settings", {
                                    headers: {
                                        "Content-Type": "application/json",
                                        authorization: n || ""
                                    }
                                }).then((e => e.settings)).then((e => (a = e, e)));
                            return {
                                getSiteMembersSettings: l,
                                getCaptchaSettings: () => l().then(k.B_).catch((e => (i.captureError(e, {
                                    tags: {
                                        feature: "site-members"
                                    }
                                }), t.trackEvent((0, y.RN)(y.eE.ACTIONS.SETTINGS.FAIL)), {
                                    invisible: {
                                        login: !1,
                                        signup: !1
                                    },
                                    visible: {
                                        login: !1,
                                        signup: !0
                                    }
                                }))),
                                getEnabledConnections: () => r().then((e => {
                                    var i;
                                    return null !== (i = e.enabledConnections) && void 0 !== i ? i : []
                                }))
                            }
                        })(ze, a, D, P, ie),
                        He = (0, k.eL)(u),
                        Je = (0, k.kY)(u, W),
                        Xe = new U(w, (async () => {
                            const e = await Ke.getCaptchaSettings();
                            (e.invisible.login || e.invisible.signup) && Je.hideCaptchaBadge()
                        })),
                        Qe = null == T ? void 0 : T.getBsi(),
                        Ze = Qe ? Qe.split("|")[0] : "00000000-0000-0000-0000-000000000000",
                        ei = e => {
                            a.interactionStarted(y.SE.SOCIAL_APP_LOGIN_WITH_VENDOR(e))
                        },
                        ii = {
                            appDidMount() {
                                Be && Be(), je = !0
                            },
                            async login(e, i, t, o = !1, n, a = !1, s) {
                                var r, l, c, d, u, g, p, m, h, v, C;
                                try {
                                    const s = await Ke.getCaptchaSettings();
                                    if (s.visible.login && !(null == t ? void 0 : t.recaptchaToken) && !(null == n ? void 0 : n.otp)) throw y.Xu;
                                    D.trackEvent((0, y.RN)(y.eE.ACTIONS.LOGIN.SUBMIT));
                                    const r = await ii.performLogin(e, i, a, s, t, n),
                                        l = await ii.handleLoginResponse(r, o);
                                    return D.trackEvent((0, y.RN)(y.eE.ACTIONS.LOGIN.SUCCESS)), l
                                } catch (n) {
                                    if ((0, k.Y2)(n) || D.trackEvent({
                                            eventName: "CustomEvent",
                                            params: {
                                                eventCategory: "Site members",
                                                eventAction: "Log in Failure",
                                                eventLabel: "Wix"
                                            }
                                        }), (null === (l = null === (r = null == n ? void 0 : n.details) || void 0 === r ? void 0 : r.applicationError) || void 0 === l ? void 0 : l.code) === y.O1.WAITING_APPROVAL && ii.showAdminApprovalDialog(e), (0, k.yQ)(n)) {
                                        const r = null === (u = null === (d = null === (c = null == n ? void 0 : n.details) || void 0 === c ? void 0 : c.applicationError) || void 0 === d ? void 0 : d.data) || void 0 === u ? void 0 : u.verificationId,
                                            l = null !== (h = null === (m = null === (p = null === (g = null == n ? void 0 : n.details) || void 0 === g ? void 0 : g.applicationError) || void 0 === p ? void 0 : p.data) || void 0 === m ? void 0 : m.verificationFailureReason) && void 0 !== h ? h : null === (C = null === (v = null == n ? void 0 : n.details) || void 0 === v ? void 0 : v.applicationError) || void 0 === C ? void 0 : C.code,
                                            b = {
                                                email: e,
                                                verificationId: r,
                                                error: l
                                            };
                                        return ii.showVerificationCodeDialog(b).then((n => {
                                            const r = {
                                                verificationId: null == b ? void 0 : b.verificationId,
                                                otp: n
                                            };
                                            return ii.login(e, i, t, o, r, a, s).catch((e => {
                                                throw a && ii.showLoginDialog(s, e), e
                                            }))
                                        })).then((e => (Ye.hideDialog(), e)))
                                    }
                                    throw n
                                }
                            },
                            async performLogin(e, i, t, o, n, a) {
                                var s;
                                const r = null == w ? void 0 : w.getCurrentLightboxId(),
                                    l = null === (s = I.getCurrentRouteInfo()) || void 0 === s ? void 0 : s.pageId,
                                    c = t || Re && r && Re === r || Re && l && Re === l,
                                    d = o.invisible.login && c ? await He(y.Ly.LOGIN) : void 0;
                                return (0, k.gb)(!!P["specs.thunderbolt.useIAMPlatform"], (async () => {
                                    var t;
                                    const o = await ze("/_api/iam/authentication/v1/login", {
                                        method: "POST",
                                        headers: {
                                            "Content-Type": "application/json",
                                            authorization: ie || ""
                                        },
                                        body: JSON.stringify({
                                            identifier: {
                                                email: e
                                            },
                                            inputs: {
                                                password: i
                                            },
                                            captcha_tokens: [...(null == n ? void 0 : n.recaptchaToken) ? [{
                                                Recaptcha: null == n ? void 0 : n.recaptchaToken
                                            }] : [], ...d ? [{
                                                InvisibleRecaptcha: d
                                            }] : []]
                                        })
                                    });
                                    return {
                                        member: (0, k.T2)(o),
                                        token: o.sessionToken,
                                        pages: (0, k.AC)(null === (t = o.additionalData) || void 0 === t ? void 0 : t.protectedPages),
                                        status: o.state.status
                                    }
                                }), (async () => {
                                    var t;
                                    const o = await ze("/_api/wix-sm-webapp/v1/auth/login", {
                                        method: "POST",
                                        headers: {
                                            "Content-Type": "application/json",
                                            authorization: ie || ""
                                        },
                                        body: JSON.stringify({
                                            email: e,
                                            password: i,
                                            recaptchaToken: null == n ? void 0 : n.recaptchaToken,
                                            invisibleRecaptchaToken: d,
                                            emailVerification: a
                                        })
                                    });
                                    return {
                                        member: o.member,
                                        token: null === (t = null == o ? void 0 : o.session) || void 0 === t ? void 0 : t.token
                                    }
                                }))
                            },
                            async handleOauthToken(e, i, t, o, n = !1) {
                                const s = r.getVisitorId();
                                a.interactionStarted(y.SE.SOCIAL_APP_LOGIN), D.trackEvent((0, y.RN)(y.eE.ACTIONS.LOGIN.SUBMIT, i));
                                try {
                                    const {
                                        payload: r
                                    } = await ze(De, {
                                        method: "POST",
                                        headers: {
                                            "Content-Type": "application/json"
                                        },
                                        body: JSON.stringify({
                                            svSession: ee,
                                            visitorId: s,
                                            token: e,
                                            provider: i,
                                            mode: t,
                                            lang: d.userLanguage,
                                            privacyStatus: o
                                        })
                                    });
                                    let l, c;
                                    a.interactionEnded(y.SE.SOCIAL_APP_LOGIN), a.interactionEnded(y.SE.SOCIAL_APP_LOGIN_WITH_VENDOR(i)), r.smSession && (c = r.smSession.siteMemberDto, l = r.smSession.sessionToken), c = r.siteMemberDto;
                                    const g = (0, k.Ky)(c);
                                    (0, k.kS)(u, ge, {});
                                    const p = await ii.handleLoginResponse({
                                        member: g,
                                        token: l
                                    }, n);
                                    return D.trackEvent((0, y.RN)(y.eE.ACTIONS.LOGIN.SUCCESS, i)), p
                                } catch (e) {
                                    throw D.trackEvent((0, y.RN)(y.eE.ACTIONS.LOGIN.FAIL, i)), e
                                }
                            },
                            async handleSocialLoginResponse(e, i, t = !1) {
                                var o;
                                const n = null !== (o = y.KG[i]) && void 0 !== o ? o : i;
                                a.interactionStarted(y.SE.SOCIAL_APP_LOGIN), a.interactionEnded(y.SE.SOCIAL_APP_LOGIN), a.interactionEnded(y.SE.SOCIAL_APP_LOGIN_WITH_VENDOR(n)), D.trackEvent((0, y.RN)(y.eE.ACTIONS.LOGIN.SUBMIT, n));
                                const s = (0, k.yL)(e);
                                (0, k.kS)(u, ge, {});
                                const r = await ii.handleLoginResponse(s, t);
                                return D.trackEvent((0, y.RN)(y.eE.ACTIONS.LOGIN.SUCCESS, n)), r
                            },
                            async handleLoginResponse({
                                token: e,
                                member: i,
                                pages: t,
                                status: o
                            }, n = !1) {
                                const a = i.emailVerified;
                                if (!e && !a && "ACTIVE" === i.status) return ii.showConfirmationEmailDialog(i.id);
                                if (!e || "REQUIRE_OWNER_APPROVAL" === o) return ii.showAdminApprovalDialog(i.loginEmail);
                                (0, k.kS)(u, ge, {
                                    sessionToken: e
                                });
                                const s = await ii.applySessionToken(e, i, n && !t, !!t),
                                    r = null != t ? t : s;
                                return Object.assign({
                                    sessionToken: e,
                                    member: i
                                }, n ? {
                                    pages: r
                                } : {})
                            },
                            async promptLogin(e, i, t) {
                                var o, n, a, s;
                                void 0 === e && (e = {}), void 0 === i && (i = null === (n = null === (o = Xe.config) || void 0 === o ? void 0 : o.isCloseable) || void 0 === n || n), void 0 === t && (t = null !== (s = null === (a = Xe.config) || void 0 === a ? void 0 : a.returnPages) && void 0 !== s && s);
                                const {
                                    mode: r,
                                    modal: l
                                } = e, c = "login" === (null != r ? r : fe), u = l ? "popup" : "fullscreen";
                                return J ? (await ii.showNotificationDialog(se.templateNotificationTitle, se.templateNotificationMessage, se.containerOk), Promise.reject(y.$9.CANCELED)) : (Je.loadScript(d.userLanguage, y.mz), c ? ii.showLoginDialog({
                                    isCloseable: i,
                                    displayMode: u,
                                    returnPages: t
                                }) : ii.showSignUpDialog({
                                    isCloseable: i,
                                    displayMode: u,
                                    returnPages: t
                                }))
                            },
                            promptForgotPassword(e = !0) {
                                return new Promise(((i, t) => {
                                    Xe.assignRequestAuthenticationPromise(i, t);
                                    const o = {
                                            isCloseable: e,
                                            directionByLanguage: d.directionByLanguage,
                                            translations: se
                                        },
                                        n = {
                                            async onCloseDialogCallback() {
                                                (0, k.CY)(ge, u), Ge.closingDialog("RequestResetPassword"), Ye.hideDialog(), Xe.rejectAuthenticationRequest()
                                            },
                                            onSubmitCallback(e) {
                                                return ii.sendForgotPasswordMail(e).then((async () => {
                                                    const e = () => {
                                                        (0, k.CY)(ge, u), Xe.resolveAuthenticationRequest(), t(y.$9.CANCELED)
                                                    };
                                                    ii.showNotificationDialog(se.resetPasswordCheckEmailTitle, se.resetPasswordCheckEmailText, se.resetPasswordOk, e, e)
                                                }))
                                            }
                                        },
                                        a = Fe();
                                    Ye.displayDialog("RequestPasswordResetDialog", o, n, a)
                                }))
                            },
                            async requestAuthentication(e = {}) {
                                if (Me) return {
                                    success: !0,
                                    token: Me,
                                    reason: y.$9.ALREADY_LOGGED_IN
                                };
                                try {
                                    const i = !z,
                                        {
                                            sessionToken: t
                                        } = await ii.promptLogin(e, i);
                                    return {
                                        success: !0,
                                        token: t,
                                        reason: y.$9.SUCCESS
                                    }
                                } catch (e) {
                                    return {
                                        success: !1,
                                        reason: e
                                    }
                                }
                            },
                            async requestAuthorizedPages(e = {}) {
                                if (Ue) {
                                    return {
                                        success: !0,
                                        pages: await ii.authorizeMemberPagesBySignedInstance(Ue)
                                    }
                                }
                                try {
                                    const i = !z;
                                    Xe.setConfig({
                                        isCloseable: i,
                                        returnPages: !0
                                    });
                                    const t = await ii.promptLogin(e, i, !0);
                                    return Xe.reset(), {
                                        success: !0,
                                        pages: t.pages
                                    }
                                } catch (e) {
                                    return {
                                        success: !1,
                                        reason: e
                                    }
                                }
                            },
                            async applySessionToken(e, i, t = !1, n = !1) {
                                a.interactionStarted(y.SE.VERIFY_TOKEN);
                                const s = await (n ? ze(`/_api/iam/cookie/v1/createSessionCookie?sessionToken=${e}`, {
                                    method: "GET",
                                    headers: {
                                        authorization: ie || ""
                                    }
                                }) : ze(Se, {
                                    method: "POST",
                                    body: `token=${e}`
                                }));
                                var l;
                                if (a.interactionEnded(y.SE.VERIFY_TOKEN), await r.loadNewSession({
                                        reason: "memberLogin"
                                    }), ie = r.getAppInstanceByAppDefId(Z), Ue = r.getSmToken(), Me = e, _e = null != i ? i : await ii.getMemberDetails(), await (l = _e, Promise.all(Object.entries(We).map((async ([e, i]) => {
                                        try {
                                            if ("$$$timeout$$$" === await Promise.race([i(l), (0, k._v)(3e3).then((() => "$$$timeout$$$"))])) throw new Error(`callback ${e} timed out`)
                                        } catch (e) {
                                            a.captureError(e, {
                                                tags: {
                                                    feature: "site-members"
                                                }
                                            })
                                        }
                                    })))), o.export({
                                        memberDetails: _e
                                    }), t) return s.payload.pages
                            },
                            async authorizeMemberPagesByCookie() {
                                const e = (0, m.yF)(u) ? {
                                        headers: {
                                            cookie: `smSession=${Y}`
                                        }
                                    } : void 0,
                                    {
                                        authorizedPages: i
                                    } = await ze(we, e);
                                return i
                            },
                            async authorizeMemberPagesByToken(e) {
                                if (e === Y) return this.authorizeMemberPagesByCookie();
                                const {
                                    payload: i
                                } = await ze(Se, {
                                    method: "POST",
                                    body: `token=${e}`
                                }), {
                                    pages: t
                                } = i;
                                return t
                            },
                            async authorizeMemberPagesBySignedInstance(e) {
                                const i = {
                                        headers: {
                                            authorization: e
                                        }
                                    },
                                    {
                                        authorizedPages: t
                                    } = await ze(we, i);
                                return t
                            },
                            async getMemberDetails(e = !1) {
                                return _e.id && !e ? _e : Ue ? (_e = await Ve(), o.export({
                                    memberDetails: _e
                                }), e && await (i = _e, Promise.all(Object.values(qe).map((async e => {
                                    try {
                                        await e(i)
                                    } catch (e) {
                                        a.captureError(e, {
                                            tags: {
                                                feature: "site-members"
                                            }
                                        })
                                    }
                                })))), _e) : null;
                                var i
                            },
                            async register(e, i, t, o, n, s, r, l, c) {
                                var d, g, p, m, h, v, C, b, S, E;
                                s = null != s && s;
                                try {
                                    const c = await Ke.getCaptchaSettings();
                                    if (c.visible.signup && "Enabled" !== P["specs.ShouldPassCaptchaVerificationOnSignupSpec"] && !r && !(null == l ? void 0 : l.otp)) throw y.Xu;
                                    a.interactionStarted(y.SE.CODE_SIGNUP), D.trackEvent((0, y.RN)(y.eE.ACTIONS.SIGNUP.SUBMIT));
                                    const g = null == w ? void 0 : w.getCurrentLightboxId(),
                                        p = null === (d = I.getCurrentRouteInfo()) || void 0 === d ? void 0 : d.pageId,
                                        m = n || Ae && g && Ae === g || Ae && p && Ae === p,
                                        h = c.invisible.signup && m ? await He(y.Ly.SIGNUP) : void 0,
                                        {
                                            member: v,
                                            sessionToken: C,
                                            pages: b,
                                            status: S
                                        } = await ii.performRegister(e, i, {
                                            contactInfo: t,
                                            profilePrivacyStatus: o,
                                            isDefaultFlow: n,
                                            recaptchaToken: r,
                                            invisibleRecaptchaToken: h,
                                            emailVerification: l
                                        }),
                                        E = v.emailVerified,
                                        f = "ACTIVE" === (null == v ? void 0 : v.status) ? "ACTIVE" : "PENDING";
                                    if (!C && !E && "ACTIVE" === v.status) return a.interactionEnded(y.SE.CODE_SIGNUP), ii.showConfirmationEmailDialog(v.id);
                                    if (n && "APPLICANT" === (null == v ? void 0 : v.status) || !C || "REQUIRE_OWNER_APPROVAL" === S) return a.interactionEnded(y.SE.CODE_SIGNUP), ii.showAdminApprovalDialog(e);
                                    (0, k.kS)(u, ge, {
                                        sessionToken: C
                                    });
                                    const O = await ii.applySessionToken(C, v, s && !b, !!b),
                                        L = null != b ? b : O;
                                    return a.interactionEnded(y.SE.CODE_SIGNUP), D.trackEvent((0, y.RN)(y.eE.ACTIONS.SIGNUP.SUCCESS)), D.trackEvent({
                                        eventName: "CompleteRegistration",
                                        params: {
                                            origin: "Site members",
                                            method: "Wix"
                                        }
                                    }), Object.assign({
                                        member: v,
                                        status: f,
                                        sessionToken: C
                                    }, s && L ? {
                                        pages: L
                                    } : {})
                                } catch (l) {
                                    if ((0, k.yQ)(l)) {
                                        const a = await Ke.getSiteMembersSettings(),
                                            d = null === (m = null === (p = null === (g = null == l ? void 0 : l.details) || void 0 === g ? void 0 : g.applicationError) || void 0 === p ? void 0 : p.data) || void 0 === m ? void 0 : m.verificationId,
                                            u = null !== (b = null === (C = null === (v = null === (h = null == l ? void 0 : l.details) || void 0 === h ? void 0 : h.applicationError) || void 0 === v ? void 0 : v.data) || void 0 === C ? void 0 : C.verificationFailureReason) && void 0 !== b ? b : null === (E = null === (S = null == l ? void 0 : l.details) || void 0 === S ? void 0 : S.applicationError) || void 0 === E ? void 0 : E.code,
                                            w = {
                                                email: e,
                                                verificationId: d,
                                                error: u
                                            };
                                        return ii.showVerificationCodeDialog(w).then((l => {
                                            const d = {
                                                verificationId: null == w ? void 0 : w.verificationId,
                                                otp: l
                                            };
                                            return "DURING_SIGNUP" !== a.emailVerificationOption ? ii.login(e, i, {
                                                recaptchaToken: r
                                            }, s, d, n).then((e => {
                                                var i;
                                                const t = "ACTIVE" === (null === (i = null == e ? void 0 : e.member) || void 0 === i ? void 0 : i.status) ? "ACTIVE" : "PENDING";
                                                return Object.assign(Object.assign({}, e), {
                                                    status: t
                                                })
                                            }), (e => {
                                                throw n && ii.showLoginDialog(c, e), e
                                            })) : ii.register(e, i, t, o, n, s, r, d, c).catch((e => {
                                                throw n && ii.showSignUpDialog(c, e), e
                                            }))
                                        })).then((e => (Ye.hideDialog(), e)))
                                    }
                                    throw (0, k.fJ)(l) ? a.interactionEnded(y.SE.CODE_SIGNUP) : D.trackEvent((0, y.RN)(y.eE.ACTIONS.SIGNUP.FAIL)), l
                                }
                            },
                            async performRegister(e, i, {
                                contactInfo: t,
                                profilePrivacyStatus: o,
                                isDefaultFlow: n,
                                recaptchaToken: a,
                                invisibleRecaptchaToken: s,
                                emailVerification: r
                            } = {}) {
                                return (0, k.gb)(!!P["specs.thunderbolt.useIAMPlatform"], (async () => {
                                    var n;
                                    const r = {
                                            identity: {
                                                identifiers: [{
                                                    email: e
                                                }],
                                                identityProfile: Object.assign(Object.assign({}, (0, k.AO)(t || {})), {
                                                    privacyStatus: o
                                                })
                                            },
                                            inputs: {
                                                password: i
                                            },
                                            captcha_tokens: [...a ? [{
                                                Recaptcha: a
                                            }] : [], ...s ? [{
                                                InvisibleRecaptcha: s
                                            }] : []]
                                        },
                                        l = await ze("/_api/iam/authentication/v1/register", {
                                            method: "POST",
                                            headers: {
                                                "Content-Type": "application/json",
                                                authorization: ie || ""
                                            },
                                            body: JSON.stringify(r)
                                        });
                                    return {
                                        member: (0, k.T2)(l),
                                        sessionToken: l.sessionToken,
                                        pages: (0, k.AC)(null === (n = l.additionalData) || void 0 === n ? void 0 : n.protectedPages),
                                        status: l.state.status
                                    }
                                }), (async () => {
                                    const l = {
                                            email: e,
                                            password: i,
                                            profilePrivacyStatus: o,
                                            contactInfo: (0, k.t1)(t || {}),
                                            defaultFlow: n,
                                            recaptchaToken: a,
                                            invisibleRecaptchaToken: s,
                                            emailVerification: r
                                        },
                                        {
                                            member: c,
                                            session: d
                                        } = await ze("/_api/wix-sm-webapp/v1/auth/signup", {
                                            method: "POST",
                                            headers: {
                                                "Content-Type": "application/json",
                                                authorization: ie || ""
                                            },
                                            body: JSON.stringify(l)
                                        });
                                    return {
                                        member: c,
                                        sessionToken: null == d ? void 0 : d.token
                                    }
                                }))
                            },
                            async sendForgotPasswordMail(e) {
                                a.interactionStarted(y.SE.RESET_PASSWORD);
                                const i = d.userLanguage,
                                    t = encodeURIComponent(ge),
                                    o = encodeURIComponent(e),
                                    n = P["specs.thunderbolt.iamResetPasswordFlow"] ? "/_api/iam/recovery/v1/send-email" : "/_api/wix-sm-webapp/member/sendForgotPasswordMail",
                                    s = P["specs.thunderbolt.iamResetPasswordFlow"] ? JSON.stringify({
                                        language: i,
                                        email: e,
                                        redirect: {
                                            url: ge
                                        }
                                    }) : `returnUrl=${t}&collectionId=${H}&metaSiteId=${le}&lang=${i}&email=${o}`,
                                    r = P["specs.thunderbolt.iamResetPasswordFlow"] ? {
                                        "Content-Type": "application/json",
                                        authorization: ie || ""
                                    } : void 0;
                                await ze(n, {
                                    headers: r,
                                    method: "POST",
                                    body: s
                                }), a.interactionEnded(y.SE.RESET_PASSWORD)
                            },
                            async sendSetPasswordEmail(e, i) {
                                const t = await ze("/_api/wix-sm-webapp/members/v1/auth/members/send-set-password-email", {
                                    method: "POST",
                                    headers: {
                                        "Content-Type": "application/json",
                                        authorization: ie || ""
                                    },
                                    body: JSON.stringify(Object.assign({
                                        email: e
                                    }, (null == i ? void 0 : i.hideIgnoreMessage) ? {
                                        hideIgnoreMessage: i.hideIgnoreMessage
                                    } : {}))
                                });
                                return !!(null == t ? void 0 : t.accepted)
                            },
                            async changePassword(e, i) {
                                const t = encodeURIComponent(e),
                                    o = i.startsWith(y.nc),
                                    n = o ? "/_api/iam/recovery/v1/recover" : ye,
                                    a = o ? JSON.stringify({
                                        password: e,
                                        recovery_token: i
                                    }) : `newPassword=${t}&forgotPasswordToken=${i}`,
                                    s = o ? {
                                        "Content-Type": "application/json",
                                        authorization: ie || ""
                                    } : void 0;
                                await ze(n, {
                                    method: "POST",
                                    headers: s,
                                    body: a
                                })
                            },
                            async resendEmailVerification(e) {
                                await ze(`/_api/wix-sm-webapp/tokens/email/resend/${e}`)
                            },
                            async logout(e) {
                                if (Ue) {
                                    if (await ze(Ee, {
                                            method: "POST"
                                        }).catch((() => {
                                            D.trackEvent((0, y.RN)(y.eE.ACTIONS.LOGOUT.FAIL))
                                        })), await Promise.all(Object.entries(xe).map((async ([e, i]) => {
                                            try {
                                                if ("$$$timeout$$$" === await Promise.race([i(), (0, k._v)(3e3).then((() => "$$$timeout$$$"))])) throw new Error(`callback ${e} timed out`)
                                            } catch (e) {
                                                a.captureError(e, {
                                                    tags: {
                                                        feature: "site-members"
                                                    }
                                                })
                                            }
                                        }))), e) {
                                        const i = `./${e.replace(/^\//,"")}`;
                                        await g.navigate(i)
                                    }(0, m.yF)(u) || u.document.location.reload()
                                }
                            },
                            registerToUserLogin(e, i = (0, E.uniqueId)("callback")) {
                                return We[i] = e, i
                            },
                            unRegisterToUserLogin(e) {
                                delete We[e]
                            },
                            registerToMemberLogout(e) {
                                const i = (0, E.uniqueId)("logout_callback");
                                return xe[i] = e, i
                            },
                            unRegisterToMemberLogout(e) {
                                delete xe[e]
                            },
                            registerToMemberDetailsRefresh(e) {
                                const i = (0, E.uniqueId)("mdrcb");
                                return qe[i] = e, i
                            },
                            unRegisterToMemberDetailsRefresh(e) {
                                delete qe[e]
                            },
                            async showWelcomeDialog(e = !0) {
                                const i = {
                                        isCloseable: e,
                                        translations: se
                                    },
                                    t = C.getParsedUrl(),
                                    o = {
                                        onCloseDialogCallback() {
                                            (0, k.CY)(ge, u), Ge.closingDialog("WelcomeDialog");
                                            const e = new URL(ge).hostname,
                                                i = 0 === e.indexOf("www") ? e.substr(3) : e;
                                            $("sm_ef", "/", i), X = "", Ye.hideDialog(), g.navigate(t.href)
                                        },
                                        onSubmitCallback() {
                                            const e = new URL(ge).hostname,
                                                i = 0 === e.indexOf("www") ? e.substr(3) : e;
                                            $("sm_ef", "/", i), X = "", Ye.hideDialog(), re && g.navigate("./account/my-account"), g.navigate(t.href)
                                        }
                                    };
                                a.interactionStarted(y.SE.WELCOME_DIALOG), a.interactionEnded(y.SE.WELCOME_DIALOG), Ye.displayDialog("WelcomeDialog", i, o)
                            },
                            async showNoPermissionsToPageDialog(e) {
                                const i = {
                                    onCloseDialogCallback() {
                                        (0, k.CY)(ge, u), Ye.hideDialog(), e && e()
                                    },
                                    onSwitchAccountLinkClick() {
                                        ii.logout()
                                    }
                                };
                                Ye.displayDialog("NoPermissionsToPageDialog", {
                                    translations: se
                                }, i)
                            },
                            async showResetPasswordDialog(e) {
                                const i = {
                                        isCloseable: !0,
                                        isTermsOfUseNeeded: !(!(null == Oe ? void 0 : Oe.enabled) || !ae.termsOfUse),
                                        isPrivacyPolicyNeeded: !(!(null == ke ? void 0 : ke.enabled) || !ae.privacyPolicy),
                                        termsOfUseLink: ae.termsOfUse,
                                        privacyPolicyLink: ae.privacyPolicy,
                                        directionByLanguage: d.directionByLanguage,
                                        translations: se
                                    },
                                    t = () => {
                                        const e = C.getParsedUrl();
                                        return e.searchParams.delete("forgotPasswordToken"), e.searchParams.delete("forgotPasswordLang"), C.pushUrlState(e), e
                                    },
                                    o = {
                                        onCloseDialogCallback() {
                                            (0, k.CY)(ge, u), Ge.closingDialog("ResetPasswordDialog");
                                            const e = t();
                                            Ye.hideDialog(), g.navigate(e.href)
                                        },
                                        async onSubmitCallback(o) {
                                            try {
                                                await ii.changePassword(o, e), ii.showNotificationDialog(se.resetPasswordSuccessTitle, "", se.containerOk, (async () => {
                                                    if (e.startsWith(y.nc)) {
                                                        const e = new URL(ge).searchParams.get("redirectUrl");
                                                        if (e) return null == u ? void 0 : u.location.replace(e)
                                                    }
                                                    const i = t();
                                                    await ii.showLoginDialog(), g.navigate(i.href)
                                                }))
                                            } catch (e) {
                                                const t = (0, k.zg)(e).toString();
                                                if (t !== y.O1.RESET_PASSWORD_TOKEN_EXPIRED && t !== y.O1.NEW_RESET_PASSWORD_TOKEN_EXPIRED) throw e;
                                                ii.showNotificationDialog(se.passwordHasExpiredTitle, se.passwordHasExpiredText, se.passwordHasExpiredOk, (() => ii.promptForgotPassword(i.isCloseable).then((() => {
                                                    const e = C.getParsedUrl();
                                                    g.navigate(e.href)
                                                }))))
                                            }
                                        }
                                    };
                                Ye.displayDialog("ResetPasswordDialog", i, o, Fe())
                            },
                            async showLoginDialog(e = {}, i) {
                                const {
                                    returnPages: t,
                                    isCloseable: o,
                                    displayMode: n
                                } = Object.assign({
                                    isCloseable: !0,
                                    displayMode: "fullscreen",
                                    returnPages: !1
                                }, e), s = await Ke.getCaptchaSettings();
                                return Je.setCaptchaBadgeVisibility(s.invisible.login), Re && (null == w ? void 0 : w.isLightbox(Re)) ? ii.showCustomAuthenticationDialog(Re, t) : new Promise((async (r, l) => {
                                    Xe.assignRequestAuthenticationPromise(r, l);
                                    const c = "Enabled" === P["specs.ShouldForceCaptchaVerificationOnLoginSpec"] || s.visible.login,
                                        [g, p] = (0, E.partition)(await ii.getConnections(), {
                                            appDefId: y.Ld.PASSWORD
                                        }),
                                        m = {
                                            bsi: Ze,
                                            displayMode: n,
                                            language: d.userLanguage,
                                            directionByLanguage: d.directionByLanguage,
                                            isCloseable: o,
                                            smCollectionId: H,
                                            svSession: ee,
                                            biVisitorId: te(),
                                            metaSiteId: le,
                                            isEmailLoginEnabled: g.length > 0,
                                            idps: p,
                                            shouldForceCaptchaVerification: !s.invisible.login && c,
                                            isSocialAuthSupported: Ce,
                                            serverError: i,
                                            reportBi: b.reportBi,
                                            translations: se
                                        },
                                        v = {
                                            onCloseDialogCallback() {
                                                (0, k.CY)(ge, u), Ye.hideDialog(), Ge.closingDialog("MemberLoginDialog", n), Xe.rejectAuthenticationRequest()
                                            },
                                            submit(i, o, s) {
                                                return a.interactionStarted(y.SE.DEFAULT_LOGIN), Ge.emailAuthSubmitClicked("MemberLoginDialog", n), ii.login(i, o, s, t, void 0, !0, e).then((e => {
                                                    a.interactionEnded(y.SE.DEFAULT_LOGIN), Ye.hideDialog(), r(e)
                                                })).catch((e => {
                                                    throw (0, k.Y2)(e) && a.interactionEnded(y.SE.DEFAULT_LOGIN), e
                                                }))
                                            },
                                            onForgetYourPasswordClick() {
                                                ii.promptForgotPassword(o)
                                            },
                                            onSwitchDialogLinkClick() {
                                                ii.showSignUpDialog({
                                                    isCloseable: o,
                                                    displayMode: n,
                                                    returnPages: t
                                                }).then(r, (() => {
                                                    Xe.rejectAuthenticationRequest()
                                                }))
                                            },
                                            onTokenMessage(e, i, o = !1) {
                                                let n;
                                                return G && (n = o ? "PUBLIC" : "PRIVATE"), ii.handleOauthToken(e, i, "memberLoginDialog", n, t).then((e => {
                                                    Ye.hideDialog(), r(e)
                                                }))
                                            },
                                            onBackendSocialLogin(e, i) {
                                                return ii.handleSocialLoginResponse(e, i, t).then((e => {
                                                    Ye.hideDialog(), r(e)
                                                }))
                                            },
                                            getHostReadyPayload: () => ({
                                                visitorId: te(),
                                                svSession: ee
                                            }),
                                            openCaptcha: (0, h.yT)({
                                                captcha: L,
                                                userLanguage: d.userLanguage
                                            }),
                                            reportSocialAuthStarted: ei
                                        };
                                    Ge.loginOrSignUpDialogLoaded("MemberLoginDialog", n), await Ye.displayDialog("MemberLoginDialog", m, v, Fe()), ii.closeCustomAuthenticationDialogs(!0)
                                }))
                            },
                            async showSignUpDialog(e = {}, i) {
                                const {
                                    returnPages: t,
                                    isCloseable: o,
                                    displayMode: n
                                } = Object.assign({
                                    isCloseable: !0,
                                    displayMode: "fullscreen",
                                    returnPages: !1
                                }, e), s = await Ke.getCaptchaSettings();
                                if (Je.setCaptchaBadgeVisibility(s.invisible.signup), Ae && (null == w ? void 0 : w.isLightbox(Ae))) return ii.showCustomAuthenticationDialog(Ae, t);
                                const r = "Enabled" !== P["specs.ShouldPassCaptchaVerificationOnSignupSpec"] && "Enabled" === P["specs.ShouldForceCaptchaVerificationOnSignupSpec"];
                                return new Promise((async (l, c) => {
                                    const g = r || s.visible.signup && "Enabled" !== P["specs.ShouldPassCaptchaVerificationOnSignupSpec"],
                                        [p, m] = (0, E.partition)(await ii.getConnections(), {
                                            appDefId: y.Ld.PASSWORD
                                        });
                                    Xe.assignRequestAuthenticationPromise(l, c);
                                    const v = {
                                            bsi: Ze,
                                            displayMode: n,
                                            language: d.userLanguage,
                                            directionByLanguage: d.directionByLanguage,
                                            isCloseable: o,
                                            smCollectionId: H,
                                            biVisitorId: te(),
                                            svSession: ee,
                                            metaSiteId: le,
                                            isSocialAuthSupported: Ce,
                                            isEmailLoginEnabled: p.length > 0,
                                            idps: m,
                                            isCommunityInstalled: G,
                                            privacyNoteType: Te,
                                            joinCommunityCheckedByDefault: Ne,
                                            isTermsOfUseNeeded: !(!(null == Oe ? void 0 : Oe.enabled) || !ae.termsOfUse),
                                            isPrivacyPolicyNeeded: !(!(null == ke ? void 0 : ke.enabled) || !ae.privacyPolicy),
                                            isCodeOfConductNeeded: !(!(null == Le ? void 0 : Le.enabled) || !ae.codeOfConduct),
                                            shouldForceCaptchaVerification: !s.invisible.signup && g,
                                            termsOfUseLink: ae.termsOfUse,
                                            privacyPolicyLink: ae.privacyPolicy,
                                            codeOfConductLink: ae.codeOfConduct,
                                            serverError: i,
                                            reportBi: b.reportBi,
                                            translations: se
                                        },
                                        C = {
                                            onCloseDialogCallback() {
                                                (0, k.CY)(ge, u), Ye.hideDialog(), Ge.closingDialog("SignUpDialog", n), Xe.rejectAuthenticationRequest()
                                            },
                                            submit(i, o, s) {
                                                let r;
                                                if (G) {
                                                    r = ("boolean" == typeof s ? s : s.isCommunityChecked) ? y.iY.PUBLIC : y.iY.PRIVATE
                                                }
                                                const c = "boolean" == typeof s || null == s ? void 0 : s.recaptchaToken;
                                                return a.interactionStarted(y.SE.DEFAULT_SIGNUP), Ge.emailAuthSubmitClicked("SignUpDialog", n), ii.register(i, o, void 0, r, !0, t, c, void 0, e).then((e => {
                                                    a.interactionEnded(y.SE.DEFAULT_SIGNUP);
                                                    const {
                                                        member: i,
                                                        sessionToken: o,
                                                        pages: n
                                                    } = e;
                                                    o && (Ye.hideDialog(), l(Object.assign({
                                                        member: i,
                                                        sessionToken: o
                                                    }, t ? {
                                                        pages: n
                                                    } : {})))
                                                })).catch((e => {
                                                    throw (0, k.fJ)(e) && a.interactionEnded(y.SE.DEFAULT_SIGNUP), e
                                                }))
                                            },
                                            onSwitchDialogLinkClick() {
                                                ii.showLoginDialog({
                                                    isCloseable: o,
                                                    displayMode: n,
                                                    returnPages: t
                                                }).then(l, (() => {
                                                    Xe.rejectAuthenticationRequest()
                                                }))
                                            },
                                            onTokenMessage(e, i, o = !1) {
                                                let n;
                                                return G && (n = o ? "PUBLIC" : "PRIVATE"), ii.handleOauthToken(e, i, "memberLoginDialog", n, t).then((e => {
                                                    Ye.hideDialog(), l(e)
                                                }))
                                            },
                                            onBackendSocialLogin(e, i) {
                                                return ii.handleSocialLoginResponse(e, i, t).then((e => {
                                                    Ye.hideDialog(), l(e)
                                                }))
                                            },
                                            getHostReadyPayload: () => ({
                                                visitorId: te(),
                                                svSession: ee
                                            }),
                                            openCaptcha: (0, h.yT)({
                                                captcha: L,
                                                userLanguage: d.userLanguage
                                            }),
                                            reportSocialAuthStarted: ei
                                        };
                                    Ge.loginOrSignUpDialogLoaded("SignUpDialog", n), await Ye.displayDialog("SignUpDialog", v, C, Fe()), ii.closeCustomAuthenticationDialogs(!0)
                                }))
                            },
                            async hideAuthDialog() {
                                console.warn("hideAuthDialog is not supported")
                            },
                            async showNotificationDialog(e, i, t, o = (() => 0), n = (() => 0)) {
                                const a = {
                                        isCloseable: !0,
                                        title: e,
                                        description: i,
                                        okButtonText: t,
                                        translations: se
                                    },
                                    s = {
                                        onCloseDialogCallback() {
                                            (0, k.CY)(ge, u), Ge.closingDialog("NotificationDialog"), Ye.hideDialog(), n()
                                        },
                                        onOkButtonClick() {
                                            Ye.hideDialog(), o()
                                        }
                                    };
                                await Ye.displayDialog("NotificationDialog", a, s)
                            },
                            async showConfirmationEmailDialog(e, i = !0) {
                                return new Promise(((t, o) => {
                                    const n = {
                                            isCloseable: !0,
                                            isSignUp: i,
                                            translations: se
                                        },
                                        a = {
                                            onCloseDialogCallback() {
                                                (0, k.CY)(ge, u), Ge.closingDialog("ConfirmationEmailDialog"), Ye.hideDialog(), Xe.rejectAuthenticationRequest(), o(y.$9.CANCELED)
                                            },
                                            async onResendConfirmationEmail() {
                                                await ii.resendEmailVerification(e), await ii.showConfirmationEmailDialog(e, !1).catch(o)
                                            }
                                        };
                                    Ye.displayDialog("ConfirmationEmailDialog", n, a)
                                }))
                            },
                            async showAdminApprovalDialog(e) {
                                return new Promise(((i, t) => {
                                    const o = () => {
                                        (0, k.kS)(u, ge, {
                                            error: k.nA.ACCESS_DENIED
                                        }), Xe.rejectAuthenticationRequest(), t(y.$9.CANCELED)
                                    };
                                    ii.showNotificationDialog("", `${se.applySuccess1} ${se.applySuccess2}`.replace("{0}", e), se.containerOk, o, o)
                                }))
                            },
                            async showCustomAuthenticationDialog(e, i = !1) {
                                if (!w) throw new Error("popup unavailable");
                                return new Promise((async (t, o) => {
                                    Xe.assignRequestAuthenticationPromise(t, o);
                                    const n = ii.registerToUserLogin((async () => {
                                        Xe.resolveAuthenticationRequest(Object.assign({
                                            member: _e,
                                            sessionToken: Me
                                        }, i ? {
                                            pages: await ii.authorizeMemberPagesBySignedInstance(Ue)
                                        } : {})), ii.unRegisterToUserLogin(n), w.getCurrentLightboxId() === e && w.close()
                                    }), "customAuthCbId");
                                    await Xe.openPopupPage(e, (() => {
                                        ii.unRegisterToUserLogin(n)
                                    })), Ye.hideDialog()
                                }))
                            },
                            async closeCustomAuthenticationDialogs(e = !1) {
                                const i = null == w ? void 0 : w.getCurrentLightboxId();
                                i && [Ae, Re].includes(i) && (e && Xe.preventCustomPopupCloseCallback(), await w.close(), Xe.allowCustomPopupCloseCallback())
                            },
                            getForgotPasswordToken() {
                                return new URL((0, m.yF)(u) ? ge : u.location.href).searchParams.get("forgotPasswordToken")
                            },
                            shouldDisplayWelcomeDialog() {
                                return X && re
                            },
                            async showVerificationCodeDialog(e) {
                                return new Promise((async (i, t) => {
                                    var o, n;
                                    a.interactionStarted(y.SE.VERIFICATION_CODE), Ge.siteMembersEmailConfirmationNewMembersModalLoad(), Xe.assignRequestAuthenticationPromise(i, t);
                                    const s = {
                                            language: d.userLanguage,
                                            directionByLanguage: d.directionByLanguage,
                                            isCloseable: null === (n = null === (o = Xe.config) || void 0 === o ? void 0 : o.isCloseable) || void 0 === n || n,
                                            displayMode: "customPopup",
                                            email: null == e ? void 0 : e.email,
                                            error: null == e ? void 0 : e.error,
                                            translations: se
                                        },
                                        r = {
                                            onResendVerificationCodeEmail() {
                                                Ge.siteMembersEmailConfirmationOnResendCodeClick(), i(null)
                                            },
                                            onCloseDialogCallback() {
                                                Ge.closingDialog("VerificationCode"), (0, k.CY)(ge, u), Ye.hideDialog(), Xe.rejectAuthenticationRequest(), t(y.$9.CANCELED)
                                            },
                                            onSubmitCallback(e) {
                                                Ge.siteMembersEmailConfirmationSendCodeClick(), i(e)
                                            }
                                        };
                                    a.interactionEnded(y.SE.VERIFICATION_CODE), Ye.displayDialog("VerificationCodeDialog", s, r)
                                }))
                            },
                            async appWillMount() {
                                x && await ii.getMemberDetails();
                                switch (new URL(s.requestUrl).searchParams.get("showDialog")) {
                                    case "MemberLoginDialog":
                                        ii.showLoginDialog();
                                        break;
                                    case "SignUpDialog":
                                        ii.showSignUpDialog();
                                        break;
                                    case "RequestPasswordResetDialog":
                                        ii.promptForgotPassword();
                                        break;
                                    case "ResetPasswordDialog":
                                        ii.showResetPasswordDialog("faketoken");
                                        break;
                                    case "WelcomeDialog":
                                        ii.showWelcomeDialog();
                                        break;
                                    case "NoPermissionsToPageDialog":
                                        ii.showNoPermissionsToPageDialog();
                                        break;
                                    case "NotificationDialog":
                                        ii.showNotificationDialog("title", "description", "ok");
                                        break;
                                    case "ConfirmationEmailDialog":
                                        ii.showConfirmationEmailDialog("fakemember");
                                        break;
                                    case "VerificationCodeDialog":
                                        ii.showVerificationCodeDialog({
                                            email: "testEmail@test.com"
                                        })
                                }
                            },
                            pageWillUnmount({
                                pageId: e
                            }) {
                                [Ae, Re].includes(e) || Ye.hideDialog()
                            },
                            getSocialAuthComponentProps() {
                                return (0, k.IO)({
                                    config: e,
                                    viewerModel: s,
                                    sessionManager: r,
                                    bsiManager: T,
                                    handleOauthToken: ii.handleOauthToken,
                                    handleSocialLoginResponse: ii.handleSocialLoginResponse,
                                    isSocialAuthSupported: be,
                                    captcha: L,
                                    userLanguage: d.userLanguage,
                                    reportBi: b.reportBi,
                                    reportSocialAuthStarted: ei,
                                    useNewSocialFlow: !!P["specs.thunderbolt.ShouldUseNewIAMSocialFlow"],
                                    translations: se
                                })
                            },
                            async getConnections() {
                                if (P["specs.thunderbolt.useIAMEnabledConnections"]) return Ke.getEnabledConnections().then((e => e.map((({
                                    id: e,
                                    appDefId: i,
                                    displayName: t
                                }) => ({
                                    id: e,
                                    appDefId: i,
                                    name: t
                                })))));
                                const e = new URL(ge).searchParams.get("idpConnectionId");
                                return [...Q ? [] : [{
                                    id: y.Ld.PASSWORD,
                                    appDefId: y.Ld.PASSWORD,
                                    name: "Password"
                                }], ...Pe ? [{
                                    id: y.Ld.GOOGLE,
                                    appDefId: y.Ld.GOOGLE,
                                    name: "Google"
                                }] : [], ...Ie && !Q ? [{
                                    id: y.Ld.FACEBOOK,
                                    appDefId: y.Ld.FACEBOOK,
                                    name: "Facebook"
                                }] : [], ...e ? [{
                                    id: e,
                                    appDefId: e,
                                    name: "SSO"
                                }] : []]
                            }
                        };
                    return o.export({
                        promptLogin: ii.promptLogin,
                        logout: ii.logout,
                        memberDetails: _e
                    }), t.update((() => ({
                        shouldShowRenderingBlockingDialogs: () => !(!ii.getForgotPasswordToken() && !ii.shouldDisplayWelcomeDialog()),
                        showRenderingBlockingDialogs: () => {
                            const e = ii.getForgotPasswordToken();
                            return e ? ii.showResetPasswordDialog(e) : ii.shouldDisplayWelcomeDialog() ? ii.showWelcomeDialog() : void 0
                        }
                    }))), ii
                }));
            var V = t(59032),
                W = t(95793),
                x = t(81600);
            const G = (0, o.ff)([D.n9], (e => ({
                    getTpaHandlers() {
                        const i = async (i, t, o) => {
                                var n, a, s;
                                const r = await e.getMemberDetails(!0);
                                return r ? (null === (n = o.appClientSpecMapData) || void 0 === n ? void 0 : n.isWixTPA) ? {
                                    attributes: {
                                        firstName: null !== (a = r.firstName) && void 0 !== a ? a : "",
                                        lastName: null !== (s = r.lastName) && void 0 !== s ? s : "",
                                        privacyStatus: r.profilePrivacyStatus
                                    },
                                    name: r.memberName,
                                    email: r.loginEmail,
                                    id: r.id,
                                    owner: r.owner,
                                    status: r.status
                                } : {
                                    id: r.id,
                                    owner: r.owner,
                                    status: r.status
                                } : null
                            },
                            t = async (i, t = {}) => {
                                var o, n;
                                const {
                                    member: a
                                } = await e.promptLogin({
                                    mode: t.mode,
                                    modal: t.modal
                                });
                                return {
                                    attributes: {
                                        firstName: null !== (o = a.firstName) && void 0 !== o ? o : "",
                                        lastName: null !== (n = a.lastName) && void 0 !== n ? n : "",
                                        privacyStatus: a.profilePrivacyStatus
                                    },
                                    name: a.memberName,
                                    email: a.loginEmail,
                                    id: a.id,
                                    owner: a.owner,
                                    status: a.status
                                }
                            };
                        return {
                            currentMember: i,
                            smCurrentMember: i,
                            logOutCurrentMember: (0, x.u)(["site"], ((i, t) => {
                                e.logout(null == t ? void 0 : t.url)
                            })),
                            requestLogin: (0, x.u)(["site"], t),
                            smRequestLogin: (0, x.u)(["site"], t)
                        }
                    }
                }))),
                q = (0, o.ff)([D.n9, (0, o.t6)(n.$e, D.u2), r.xP], ((e, {
                    componentIds: i
                }, t) => ({
                    name: "site-members-components",
                    pageWillMount() {
                        const o = i.reduce(((i, t) => {
                            const o = e.getSocialAuthComponentProps();
                            return Object.assign(Object.assign({}, i), {
                                [t]: o
                            })
                        }), {});
                        t.update(o)
                    }
                }))),
                z = (0, o.ff)([(0, o.t6)(n.Wf, D.u2)], (e => ({
                    handle: async i => {
                        const {
                            shouldShowRenderingBlockingDialogs: t,
                            showRenderingBlockingDialogs: o
                        } = e.get();
                        return t() ? (o(), null) : i
                    }
                }))),
                Y = e => {
                    e(D.n9, V.j.AppWillMountHandler, V.j.AppDidMountHandler).to(F), e(C.BD.BlockingDialogs).to(z)
                },
                K = e => {
                    e(W.go).to(G), e(V.j.PageWillMountHandler).to(q), e(V.j.PageWillUnmountHandler).to((0, o.ff)([D.n9], (e => ({
                        pageWillUnmount(i) {
                            return e.pageWillUnmount(i)
                        }
                    }))))
                }
        }
    }
]);
//# sourceMappingURL=/static/services/wix-thunderbolt/dist/group_8.ed6ef85f.chunk.min.js.map